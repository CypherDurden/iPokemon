//
//  Pokebola.swift
//  iPockemon
//
//  Created by Vitor Lopes on 29/07/25.
//
import Foundation
import SwiftUI


struct Pokebola: View {
    @State var catchedPoke : PokemonFull?
    var body: some View {
        VStack(spacing: 20) {
            
//            Image(catchedPoke!.frontDefault)
            AsyncImage(url: URL(string: catchedPoke?.avatarUrl ?? "")) {image in
                image
                    .resizable()
                    .aspectRatio(contentMode: .fit)
                    .clipShape(RoundedRectangle(cornerRadius: 20))
            } placeholder : {
                RoundedRectangle(cornerRadius: 20)
                    .foregroundColor(.secondary)
            }
            .frame(width: 150, height: 150)
            //            Image(catchedPoke!.backDefault)
//            Text("POKEBOLA")
        }.task {
            do {
                catchedPoke = try await getPokemonFull()

            } catch {GHError.invalidData}
            }

    }

}

//johnsundell
//torvalds

func getPokemonFull() async throws -> PokemonFull {
    let endpoint = "https://api.github.com/users/torvalds"
    guard let url = URL(string: endpoint) else { throw GHError.invalidURL }
    let (data, response) = try await URLSession.shared.data(from: url)
    
    guard let response = response as? HTTPURLResponse, response.statusCode == 200 else {
        throw GHError.invalidResponse
    }
    
    do {
        let decoder = JSONDecoder()
        decoder.keyDecodingStrategy = .convertFromSnakeCase
        return try decoder.decode(PokemonFull.self, from: data)
    } catch {
        throw GHError.invalidData
    }
}



enum GHError: Error {
    case invalidURL
    case invalidResponse
    case invalidData
}

#Preview {
    Pokebola()
}
